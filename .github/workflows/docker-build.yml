name: Docker Build and Push

on:
  push:
    branches:
      - develop
      - main
  pull_request:

# Add permissions for packages
permissions:
  contents: read
  packages: write

env:
  SCRIPTS_DIR: .github/scripts/build

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: nginx
            dockerfile: nginx/Dockerfile.prod
            context: .
          - service: backend
            dockerfile: backend/Dockerfile.prod
            context: backend
          - service: ai
            dockerfile: ai/Dockerfile
            context: ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3 # QEMU 설정

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Buildx 설정

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.ORGANIZATION }} # organization username
          password: ${{ secrets.PAT_TOKEN }} # classic token 필요

      - name: Build and Push Docker Image
        id: build_push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main') }}
          tags: ghcr.io/kakaotech-25/moheng-${{ matrix.service }}:latest # 이미지 태그

      - name: Save Build Status
        if: always()
        run: |
          echo "{\"service\":\"${{ matrix.service }}\", \"status\":\"${{ job.status }}\"}" > status.json
        shell: bash

      - name: Upload Build Status Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-status
          path: status.json

  notify:
    if: always()
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Status Artifacts
        uses: actions/download-artifact@v3
        with:
          name: '*-status' # Download all artifacts ending with -status

      - name: Aggregate Build Results
        id: aggregate
        run: |
          echo "{" > aggregated_status.json
          echo "\"results\":[" >> aggregated_status.json
          first=true
          for file in *-status/status.json; do
            if [ "$first" = true ]; then
              first=false
            else
              echo "," >> aggregated_status.json
            fi
            cat "$file" >> aggregated_status.json
          done
          echo "]}" >> aggregated_status.json
          cat aggregated_status.json
        shell: bash

      - name: Set Output for Discord Message
        id: set_message
        run: |
          STATUS=$(jq -r '.results[] | "\(.service): \(.status)"' aggregated_status.json | paste -sd ", " -)
          OVERALL_STATUS="success"
          for row in $(jq -r '.results[] | @base64' aggregated_status.json); do
            _jq() {
              echo "$row" | base64 --decode | jq -r "$1"
            }
            STATUS_CHECK=$(_jq '.status')
            if [ "$STATUS_CHECK" != "success" ]; then
              OVERALL_STATUS="failure"
              break
            fi
          done

          if [ "$OVERALL_STATUS" = "success" ]; then
            DESCRIPTION="All services built successfully: $STATUS"
            COLOR="0x00ff00"
          else
            DESCRIPTION="Some services failed to build: $STATUS"
            COLOR="0xff0000"
          fi

          echo "::set-output name=status::$OVERALL_STATUS"
          echo "::set-output name=description::$DESCRIPTION"
          echo "::set-output name=color::$COLOR"

      - name: Notify Discord
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ steps.set_message.outputs.status }}
          title: "Docker Build Results"
          description: ${{ steps.set_message.outputs.description }}
          color: ${{ steps.set_message.outputs.color }}
